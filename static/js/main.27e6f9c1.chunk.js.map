{"version":3,"sources":["constants/ui.js","components/NavBar/styles.js","config/index.js","components/NavBar/index.js","components/NavBar/NavBar.js","pages/styles.js","pages/LandingPage/styles.js","pages/LandingPage/index.js","pages/LandingPage/LandingPage.js","pages/index.js","theme.js","App.js","serviceWorker.js","index.js"],"names":["DRAWER_WIDTH","useStyles","makeStyles","theme","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","ui","marginLeft","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","display","title","NavBar","open","handleDrawerOpen","classes","AppBar","position","className","clsx","Toolbar","IconButton","color","aria-label","onClick","edge","data-testid","Typography","variant","noWrap","config","root","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","contentShift","LandingPage","paragraph","Skeleton","useTheme","React","useState","setOpen","CssBaseline","Drawer","anchor","paper","direction","Divider","List","map","text","ListItem","button","key","ListItemIcon","ListItemText","primary","createMuiTheme","overrides","MuiToolbar","backgroundColor","App","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.27e6f9c1.chunk.js","sourcesContent":["export const DRAWER_WIDTH = 240\r\n","import { makeStyles } from '@material-ui/core/styles'\r\nimport { ui } from '../../constants'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    appBar: {\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        width: `calc(100% - ${ui.DRAWER_WIDTH}px)`,\r\n        marginLeft: ui.DRAWER_WIDTH,\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n}))\r\n\r\nexport default useStyles\r\n","export default {\r\n  siteData: {\r\n    title: \"EU | scrutino\"\r\n  }\r\n}","import NavBar from './NavBar'\r\n\r\nexport default NavBar\r\n","import AppBar from '@material-ui/core/AppBar'\r\nimport clsx from 'clsx'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport React from 'react'\r\nimport { bool, func } from 'prop-types'\r\nimport useStyles from './styles'\r\nimport config from '../../config'\r\n\r\nconst NavBar = ({ open, handleDrawerOpen }) => {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <AppBar\r\n            position=\"fixed\"\r\n            className={clsx(classes.appBar, {\r\n                [classes.appBarShift]: open,\r\n            })}\r\n        >\r\n            <Toolbar>\r\n                <IconButton\r\n                    color=\"inherit\"\r\n                    aria-label=\"open drawer\"\r\n                    onClick={handleDrawerOpen}\r\n                    edge=\"start\"\r\n                    className={clsx(classes.menuButton, open && classes.hide)}\r\n                >\r\n                    <MenuIcon data-testid=\"menu-button\" />\r\n                </IconButton>\r\n                <Typography variant=\"h6\" noWrap>\r\n                    {config.siteData.title}\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\nNavBar.propTypes = {\r\n    open: bool.isRequired,\r\n    handleDrawerOpen: func.isRequired,\r\n}\r\n\r\nexport default NavBar\r\n","import { makeStyles } from '@material-ui/core/styles'\r\nimport { ui } from '../constants'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    drawer: {\r\n        width: ui.DRAWER_WIDTH,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: ui.DRAWER_WIDTH,\r\n    },\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: 'flex-end',\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        marginLeft: -ui.DRAWER_WIDTH,\r\n    },\r\n    contentShift: {\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n        marginLeft: 0,\r\n    },\r\n}))\r\n\r\nexport default useStyles\r\n","import { makeStyles } from '@material-ui/core/styles'\r\nimport { ui } from '../../constants'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: 'flex-end',\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        marginLeft: -ui.DRAWER_WIDTH,\r\n    },\r\n    contentShift: {\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n        marginLeft: 0,\r\n    },\r\n}))\r\n\r\nexport default useStyles\r\n","import LandingPage from './LandingPage'\r\n\r\nexport default LandingPage\r\n","import React from 'react'\r\nimport clsx from 'clsx'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport useStyles from './styles'\r\n\r\nconst LandingPage = ({ open }) => {\r\n    const classes = useStyles()\r\n    return (\r\n        <main\r\n            className={clsx(classes.content, {\r\n                [classes.contentShift]: open,\r\n            })}\r\n        >\r\n            <div className={classes.drawerHeader} />\r\n            <Typography paragraph>Dummy text</Typography>\r\n            <Typography paragraph>Dummy text (2)</Typography>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default LandingPage\r\n","import React from 'react'\r\nimport { useTheme } from '@material-ui/core/styles'\r\nimport Drawer from '@material-ui/core/Drawer'\r\nimport CssBaseline from '@material-ui/core/CssBaseline'\r\nimport List from '@material-ui/core/List'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport FileCopy from '@material-ui/icons/FileCopy'\r\nimport NavBar from '../components/NavBar'\r\nimport useStyles from './styles'\r\nimport LandingPage from './LandingPage'\r\n\r\nconst Skeleton = () => {\r\n    const classes = useStyles()\r\n    const theme = useTheme()\r\n    const [open, setOpen] = React.useState(false)\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true)\r\n    }\r\n\r\n    const handleDrawerClose = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline />\r\n            <NavBar open={open} handleDrawerOpen={handleDrawerOpen} />\r\n            <Drawer\r\n                className={classes.drawer}\r\n                variant=\"persistent\"\r\n                anchor=\"left\"\r\n                open={open}\r\n                classes={{\r\n                    paper: classes.drawerPaper,\r\n                }}\r\n            >\r\n                <div className={classes.drawerHeader} data-testid=\"menu-drawer\">\r\n                    <IconButton onClick={handleDrawerClose} data-testid=\"menu-close\">\r\n                        {theme.direction === 'ltr' ? (\r\n                            <ChevronLeftIcon />\r\n                        ) : (\r\n                            <ChevronRightIcon />\r\n                        )}\r\n                    </IconButton>\r\n                </div>\r\n                <Divider />\r\n                <List>\r\n                    {[\r\n                        'Landing Page',\r\n                        'Companies',\r\n                        'Funding Requests',\r\n                        'Overview',\r\n                    ].map((text) => (\r\n                        <ListItem button key={text}>\r\n                            <ListItemIcon>\r\n                                <FileCopy />\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={text} />\r\n                        </ListItem>\r\n                    ))}\r\n                </List>\r\n            </Drawer>\r\n            <LandingPage open={open} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Skeleton\r\n","import {createMuiTheme} from \"@material-ui/core/styles\";\r\n\r\nconst theme = createMuiTheme({\r\n    overrides: {\r\n        MuiToolbar: {\r\n            root: {\r\n                backgroundColor: '#00aeef',\r\n            },\r\n        },\r\n    },\r\n});\r\n\r\nexport default theme","import React from 'react'\r\nimport './App.css'\r\nimport 'fontsource-roboto'\r\nimport { ThemeProvider } from '@material-ui/core/styles'\r\n\r\nimport Skeleton from './pages'\r\nimport theme from './theme'\r\n\r\nconst App = () => (\r\n    <ThemeProvider theme={theme}>\r\n        <Skeleton />\r\n    </ThemeProvider>\r\n)\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}